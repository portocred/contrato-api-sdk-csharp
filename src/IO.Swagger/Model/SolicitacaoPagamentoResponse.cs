/* 
 * Gestão de Contratos
 *
 * API de Gestão de Contratos.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Entidade representando a saida da operação de solicitação de pagamentos.
    /// </summary>
    [DataContract]
    public partial class SolicitacaoPagamentoResponse :  IEquatable<SolicitacaoPagamentoResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SolicitacaoPagamentoResponse" /> class.
        /// </summary>
        /// <param name="NSU">Número sequencial único..</param>
        /// <param name="DataPagamento">Data do pagamento..</param>
        /// <param name="ComprovantePagamento">Comprovante do pagamento..</param>
        /// <param name="NomeCliente">Nome do Cliente..</param>
        /// <param name="CpfCliente">CPF do Cliente..</param>
        /// <param name="Parcelas">Parcelas.</param>
        public SolicitacaoPagamentoResponse(string NSU = default(string), string DataPagamento = default(string), string ComprovantePagamento = default(string), string NomeCliente = default(string), string CpfCliente = default(string), List<SolicitacaoPagamentoParcelaResponse> Parcelas = default(List<SolicitacaoPagamentoParcelaResponse>))
        {
            this.NSU = NSU;
            this.DataPagamento = DataPagamento;
            this.ComprovantePagamento = ComprovantePagamento;
            this.NomeCliente = NomeCliente;
            this.CpfCliente = CpfCliente;
            this.Parcelas = Parcelas;
        }
        
        /// <summary>
        /// Número sequencial único.
        /// </summary>
        /// <value>Número sequencial único.</value>
        [DataMember(Name="NSU", EmitDefaultValue=false)]
        public string NSU { get; set; }

        /// <summary>
        /// Data do pagamento.
        /// </summary>
        /// <value>Data do pagamento.</value>
        [DataMember(Name="dataPagamento", EmitDefaultValue=false)]
        public string DataPagamento { get; set; }

        /// <summary>
        /// Comprovante do pagamento.
        /// </summary>
        /// <value>Comprovante do pagamento.</value>
        [DataMember(Name="comprovantePagamento", EmitDefaultValue=false)]
        public string ComprovantePagamento { get; set; }

        /// <summary>
        /// Nome do Cliente.
        /// </summary>
        /// <value>Nome do Cliente.</value>
        [DataMember(Name="nomeCliente", EmitDefaultValue=false)]
        public string NomeCliente { get; set; }

        /// <summary>
        /// CPF do Cliente.
        /// </summary>
        /// <value>CPF do Cliente.</value>
        [DataMember(Name="cpfCliente", EmitDefaultValue=false)]
        public string CpfCliente { get; set; }

        /// <summary>
        /// Gets or Sets Parcelas
        /// </summary>
        [DataMember(Name="parcelas", EmitDefaultValue=false)]
        public List<SolicitacaoPagamentoParcelaResponse> Parcelas { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SolicitacaoPagamentoResponse {\n");
            sb.Append("  NSU: ").Append(NSU).Append("\n");
            sb.Append("  DataPagamento: ").Append(DataPagamento).Append("\n");
            sb.Append("  ComprovantePagamento: ").Append(ComprovantePagamento).Append("\n");
            sb.Append("  NomeCliente: ").Append(NomeCliente).Append("\n");
            sb.Append("  CpfCliente: ").Append(CpfCliente).Append("\n");
            sb.Append("  Parcelas: ").Append(Parcelas).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SolicitacaoPagamentoResponse);
        }

        /// <summary>
        /// Returns true if SolicitacaoPagamentoResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of SolicitacaoPagamentoResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SolicitacaoPagamentoResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NSU == input.NSU ||
                    (this.NSU != null &&
                    this.NSU.Equals(input.NSU))
                ) && 
                (
                    this.DataPagamento == input.DataPagamento ||
                    (this.DataPagamento != null &&
                    this.DataPagamento.Equals(input.DataPagamento))
                ) && 
                (
                    this.ComprovantePagamento == input.ComprovantePagamento ||
                    (this.ComprovantePagamento != null &&
                    this.ComprovantePagamento.Equals(input.ComprovantePagamento))
                ) && 
                (
                    this.NomeCliente == input.NomeCliente ||
                    (this.NomeCliente != null &&
                    this.NomeCliente.Equals(input.NomeCliente))
                ) && 
                (
                    this.CpfCliente == input.CpfCliente ||
                    (this.CpfCliente != null &&
                    this.CpfCliente.Equals(input.CpfCliente))
                ) && 
                (
                    this.Parcelas == input.Parcelas ||
                    this.Parcelas != null &&
                    this.Parcelas.SequenceEqual(input.Parcelas)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NSU != null)
                    hashCode = hashCode * 59 + this.NSU.GetHashCode();
                if (this.DataPagamento != null)
                    hashCode = hashCode * 59 + this.DataPagamento.GetHashCode();
                if (this.ComprovantePagamento != null)
                    hashCode = hashCode * 59 + this.ComprovantePagamento.GetHashCode();
                if (this.NomeCliente != null)
                    hashCode = hashCode * 59 + this.NomeCliente.GetHashCode();
                if (this.CpfCliente != null)
                    hashCode = hashCode * 59 + this.CpfCliente.GetHashCode();
                if (this.Parcelas != null)
                    hashCode = hashCode * 59 + this.Parcelas.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
