/* 
 * Gestão de Contratos
 *
 * API de Gestão de Contratos.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Entidade representando uma parcela de um contrato na saida da operação de recuperação de parcelas de um contrato.
    /// </summary>
    [DataContract]
    public partial class GetParcelasParcelaResponse :  IEquatable<GetParcelasParcelaResponse>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Situacao
        /// </summary>
        [DataMember(Name="situacao", EmitDefaultValue=false)]
        public SituacaoParcela? Situacao { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetParcelasParcelaResponse" /> class.
        /// </summary>
        /// <param name="CodigoContrato">Código do contrato..</param>
        /// <param name="ValorPago">Valor pago..</param>
        /// <param name="NumeroParcela">Número da parcela paga..</param>
        /// <param name="DataPagamento">Data do pagamento..</param>
        /// <param name="Operador">Código do operador..</param>
        /// <param name="NSU">Número sequencial único..</param>
        /// <param name="DataVencimento">Data de vencimento da parcela..</param>
        /// <param name="PMT">Código da parcela..</param>
        /// <param name="ValorSaldoParcela">Valor do saldo total da parcela..</param>
        /// <param name="Situacao">Situacao.</param>
        public GetParcelasParcelaResponse(string CodigoContrato = default(string), double? ValorPago = default(double?), double? NumeroParcela = default(double?), string DataPagamento = default(string), string Operador = default(string), string NSU = default(string), string DataVencimento = default(string), double? PMT = default(double?), double? ValorSaldoParcela = default(double?), SituacaoParcela? Situacao = default(SituacaoParcela?))
        {
            this.CodigoContrato = CodigoContrato;
            this.ValorPago = ValorPago;
            this.NumeroParcela = NumeroParcela;
            this.DataPagamento = DataPagamento;
            this.Operador = Operador;
            this.NSU = NSU;
            this.DataVencimento = DataVencimento;
            this.PMT = PMT;
            this.ValorSaldoParcela = ValorSaldoParcela;
            this.Situacao = Situacao;
        }
        
        /// <summary>
        /// Código do contrato.
        /// </summary>
        /// <value>Código do contrato.</value>
        [DataMember(Name="codigoContrato", EmitDefaultValue=false)]
        public string CodigoContrato { get; set; }

        /// <summary>
        /// Valor pago.
        /// </summary>
        /// <value>Valor pago.</value>
        [DataMember(Name="valorPago", EmitDefaultValue=false)]
        public double? ValorPago { get; set; }

        /// <summary>
        /// Número da parcela paga.
        /// </summary>
        /// <value>Número da parcela paga.</value>
        [DataMember(Name="numeroParcela", EmitDefaultValue=false)]
        public double? NumeroParcela { get; set; }

        /// <summary>
        /// Data do pagamento.
        /// </summary>
        /// <value>Data do pagamento.</value>
        [DataMember(Name="dataPagamento", EmitDefaultValue=false)]
        public string DataPagamento { get; set; }

        /// <summary>
        /// Código do operador.
        /// </summary>
        /// <value>Código do operador.</value>
        [DataMember(Name="operador", EmitDefaultValue=false)]
        public string Operador { get; set; }

        /// <summary>
        /// Número sequencial único.
        /// </summary>
        /// <value>Número sequencial único.</value>
        [DataMember(Name="NSU", EmitDefaultValue=false)]
        public string NSU { get; set; }

        /// <summary>
        /// Data de vencimento da parcela.
        /// </summary>
        /// <value>Data de vencimento da parcela.</value>
        [DataMember(Name="dataVencimento", EmitDefaultValue=false)]
        public string DataVencimento { get; set; }

        /// <summary>
        /// Código da parcela.
        /// </summary>
        /// <value>Código da parcela.</value>
        [DataMember(Name="PMT", EmitDefaultValue=false)]
        public double? PMT { get; set; }

        /// <summary>
        /// Valor do saldo total da parcela.
        /// </summary>
        /// <value>Valor do saldo total da parcela.</value>
        [DataMember(Name="valorSaldoParcela", EmitDefaultValue=false)]
        public double? ValorSaldoParcela { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetParcelasParcelaResponse {\n");
            sb.Append("  CodigoContrato: ").Append(CodigoContrato).Append("\n");
            sb.Append("  ValorPago: ").Append(ValorPago).Append("\n");
            sb.Append("  NumeroParcela: ").Append(NumeroParcela).Append("\n");
            sb.Append("  DataPagamento: ").Append(DataPagamento).Append("\n");
            sb.Append("  Operador: ").Append(Operador).Append("\n");
            sb.Append("  NSU: ").Append(NSU).Append("\n");
            sb.Append("  DataVencimento: ").Append(DataVencimento).Append("\n");
            sb.Append("  PMT: ").Append(PMT).Append("\n");
            sb.Append("  ValorSaldoParcela: ").Append(ValorSaldoParcela).Append("\n");
            sb.Append("  Situacao: ").Append(Situacao).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetParcelasParcelaResponse);
        }

        /// <summary>
        /// Returns true if GetParcelasParcelaResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of GetParcelasParcelaResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetParcelasParcelaResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CodigoContrato == input.CodigoContrato ||
                    (this.CodigoContrato != null &&
                    this.CodigoContrato.Equals(input.CodigoContrato))
                ) && 
                (
                    this.ValorPago == input.ValorPago ||
                    (this.ValorPago != null &&
                    this.ValorPago.Equals(input.ValorPago))
                ) && 
                (
                    this.NumeroParcela == input.NumeroParcela ||
                    (this.NumeroParcela != null &&
                    this.NumeroParcela.Equals(input.NumeroParcela))
                ) && 
                (
                    this.DataPagamento == input.DataPagamento ||
                    (this.DataPagamento != null &&
                    this.DataPagamento.Equals(input.DataPagamento))
                ) && 
                (
                    this.Operador == input.Operador ||
                    (this.Operador != null &&
                    this.Operador.Equals(input.Operador))
                ) && 
                (
                    this.NSU == input.NSU ||
                    (this.NSU != null &&
                    this.NSU.Equals(input.NSU))
                ) && 
                (
                    this.DataVencimento == input.DataVencimento ||
                    (this.DataVencimento != null &&
                    this.DataVencimento.Equals(input.DataVencimento))
                ) && 
                (
                    this.PMT == input.PMT ||
                    (this.PMT != null &&
                    this.PMT.Equals(input.PMT))
                ) && 
                (
                    this.ValorSaldoParcela == input.ValorSaldoParcela ||
                    (this.ValorSaldoParcela != null &&
                    this.ValorSaldoParcela.Equals(input.ValorSaldoParcela))
                ) && 
                (
                    this.Situacao == input.Situacao ||
                    (this.Situacao != null &&
                    this.Situacao.Equals(input.Situacao))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CodigoContrato != null)
                    hashCode = hashCode * 59 + this.CodigoContrato.GetHashCode();
                if (this.ValorPago != null)
                    hashCode = hashCode * 59 + this.ValorPago.GetHashCode();
                if (this.NumeroParcela != null)
                    hashCode = hashCode * 59 + this.NumeroParcela.GetHashCode();
                if (this.DataPagamento != null)
                    hashCode = hashCode * 59 + this.DataPagamento.GetHashCode();
                if (this.Operador != null)
                    hashCode = hashCode * 59 + this.Operador.GetHashCode();
                if (this.NSU != null)
                    hashCode = hashCode * 59 + this.NSU.GetHashCode();
                if (this.DataVencimento != null)
                    hashCode = hashCode * 59 + this.DataVencimento.GetHashCode();
                if (this.PMT != null)
                    hashCode = hashCode * 59 + this.PMT.GetHashCode();
                if (this.ValorSaldoParcela != null)
                    hashCode = hashCode * 59 + this.ValorSaldoParcela.GetHashCode();
                if (this.Situacao != null)
                    hashCode = hashCode * 59 + this.Situacao.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
