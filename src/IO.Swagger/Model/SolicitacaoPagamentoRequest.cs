/* 
 * Gestão de Contratos
 *
 * API de Gestão de Contratos.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Entidade representando a entrada da operação de solicitação de pagamentos.
    /// </summary>
    [DataContract]
    public partial class SolicitacaoPagamentoRequest :  IEquatable<SolicitacaoPagamentoRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SolicitacaoPagamentoRequest" /> class.
        /// </summary>
        /// <param name="QuantidadeParcelas">Quantidade de parcelas a serem pagas..</param>
        /// <param name="ValorPagamento">Valor do pagamento a ser solicitado..</param>
        /// <param name="Operador">Código do operador..</param>
        public SolicitacaoPagamentoRequest(int? QuantidadeParcelas = default(int?), double? ValorPagamento = default(double?), string Operador = default(string))
        {
            this.QuantidadeParcelas = QuantidadeParcelas;
            this.ValorPagamento = ValorPagamento;
            this.Operador = Operador;
        }
        
        /// <summary>
        /// Quantidade de parcelas a serem pagas.
        /// </summary>
        /// <value>Quantidade de parcelas a serem pagas.</value>
        [DataMember(Name="quantidadeParcelas", EmitDefaultValue=false)]
        public int? QuantidadeParcelas { get; set; }

        /// <summary>
        /// Valor do pagamento a ser solicitado.
        /// </summary>
        /// <value>Valor do pagamento a ser solicitado.</value>
        [DataMember(Name="valorPagamento", EmitDefaultValue=false)]
        public double? ValorPagamento { get; set; }

        /// <summary>
        /// Código do operador.
        /// </summary>
        /// <value>Código do operador.</value>
        [DataMember(Name="operador", EmitDefaultValue=false)]
        public string Operador { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SolicitacaoPagamentoRequest {\n");
            sb.Append("  QuantidadeParcelas: ").Append(QuantidadeParcelas).Append("\n");
            sb.Append("  ValorPagamento: ").Append(ValorPagamento).Append("\n");
            sb.Append("  Operador: ").Append(Operador).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SolicitacaoPagamentoRequest);
        }

        /// <summary>
        /// Returns true if SolicitacaoPagamentoRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SolicitacaoPagamentoRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SolicitacaoPagamentoRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.QuantidadeParcelas == input.QuantidadeParcelas ||
                    (this.QuantidadeParcelas != null &&
                    this.QuantidadeParcelas.Equals(input.QuantidadeParcelas))
                ) && 
                (
                    this.ValorPagamento == input.ValorPagamento ||
                    (this.ValorPagamento != null &&
                    this.ValorPagamento.Equals(input.ValorPagamento))
                ) && 
                (
                    this.Operador == input.Operador ||
                    (this.Operador != null &&
                    this.Operador.Equals(input.Operador))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.QuantidadeParcelas != null)
                    hashCode = hashCode * 59 + this.QuantidadeParcelas.GetHashCode();
                if (this.ValorPagamento != null)
                    hashCode = hashCode * 59 + this.ValorPagamento.GetHashCode();
                if (this.Operador != null)
                    hashCode = hashCode * 59 + this.Operador.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
