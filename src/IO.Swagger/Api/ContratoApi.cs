/* 
 * Gestão de Contratos
 *
 * API de Gestão de Contratos.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IContratoApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Esta funcionalidade tem como objetivo recuperar as informações de um contrato vinculado a um determinado cliente. Como resultado, será possível averiguar o saldo total deste contrato, além da lista de parcelas que o compõe, de forma detalhada, com informações especificas por parcela. Nesta modalidade de chamada, a pesquisa será realizada a partir do CPF do cliente.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <param name="cpf">Cpf do cliente que possui o contrato.</param>
        /// <returns>GetContratosResponse</returns>
        GetContratosResponse ContratosGet (string clientId, string accessToken, string codigoLojista, string cpf);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Esta funcionalidade tem como objetivo recuperar as informações de um contrato vinculado a um determinado cliente. Como resultado, será possível averiguar o saldo total deste contrato, além da lista de parcelas que o compõe, de forma detalhada, com informações especificas por parcela. Nesta modalidade de chamada, a pesquisa será realizada a partir do CPF do cliente.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <param name="cpf">Cpf do cliente que possui o contrato.</param>
        /// <returns>ApiResponse of GetContratosResponse</returns>
        ApiResponse<GetContratosResponse> ContratosGetWithHttpInfo (string clientId, string accessToken, string codigoLojista, string cpf);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Esta funcionalidade tem como objetivo cancelar um contrato no periódo D0 a D7 de um determinado cliente.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="id">O número do contrado a ser cancelado.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <param name="cpf">Cpf do cliente que possui o contrato.</param>
        /// <param name="operador">Código do operador.</param>
        /// <returns>ExclusaoPagamentoResponse</returns>
        ExclusaoPagamentoResponse ContratosIdCancelamentoPut (string clientId, string accessToken, string id, byte[] xAuthorization, string codigoLojista, string cpf, string operador);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Esta funcionalidade tem como objetivo cancelar um contrato no periódo D0 a D7 de um determinado cliente.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="id">O número do contrado a ser cancelado.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <param name="cpf">Cpf do cliente que possui o contrato.</param>
        /// <param name="operador">Código do operador.</param>
        /// <returns>ApiResponse of ExclusaoPagamentoResponse</returns>
        ApiResponse<ExclusaoPagamentoResponse> ContratosIdCancelamentoPutWithHttpInfo (string clientId, string accessToken, string id, byte[] xAuthorization, string codigoLojista, string cpf, string operador);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Permitir a exclusão, apenas em D0, do pagamento mais recente de um contrato. É importante observar que um pagamento pode englobar uma ou várias parcelas.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="id">O número do contrado a ser cancelado.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <param name="cpf">Cpf do cliente que possui o contrato.</param>
        /// <param name="operador">Código do operador.</param>
        /// <returns>ExclusaoPagamentoResponse</returns>
        ExclusaoPagamentoResponse ContratosIdExclusaoPagamentoDelete (string clientId, string accessToken, string id, byte[] xAuthorization, string codigoLojista, string cpf, string operador);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Permitir a exclusão, apenas em D0, do pagamento mais recente de um contrato. É importante observar que um pagamento pode englobar uma ou várias parcelas.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="id">O número do contrado a ser cancelado.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <param name="cpf">Cpf do cliente que possui o contrato.</param>
        /// <param name="operador">Código do operador.</param>
        /// <returns>ApiResponse of ExclusaoPagamentoResponse</returns>
        ApiResponse<ExclusaoPagamentoResponse> ContratosIdExclusaoPagamentoDeleteWithHttpInfo (string clientId, string accessToken, string id, byte[] xAuthorization, string codigoLojista, string cpf, string operador);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Esta funcionalidade tem como objetivo recuperar as informações de um contrato vinculado a um determinado cliente. Como resultado, será possível averiguar o saldo total deste contrato, além da lista de parcelas que o compõe, de forma detalhada, com informações especificas por parcela. Nesta modalidade de chamada, a pesquisa será realizada a partir do código do contrato.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador do contrato.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <returns>GetContratosResponse</returns>
        GetContratosResponse ContratosIdGet (string id, string clientId, string accessToken, string codigoLojista);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Esta funcionalidade tem como objetivo recuperar as informações de um contrato vinculado a um determinado cliente. Como resultado, será possível averiguar o saldo total deste contrato, além da lista de parcelas que o compõe, de forma detalhada, com informações especificas por parcela. Nesta modalidade de chamada, a pesquisa será realizada a partir do código do contrato.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador do contrato.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <returns>ApiResponse of GetContratosResponse</returns>
        ApiResponse<GetContratosResponse> ContratosIdGetWithHttpInfo (string id, string clientId, string accessToken, string codigoLojista);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Esta funcionalidade tem como objetivo realizar uma solicitação de pagamento de parcelas em aberto de determinado contrato. Como resultado da solicitação, são retornadas as informações das parcelas que foram pagas.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador do contrato.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="solicitacaoPagamento">Informações sobre o pagamento a ser realizado em um contrato.</param>
        /// <returns>SolicitacaoPagamentoResponse</returns>
        SolicitacaoPagamentoResponse ContratosIdSolicitacaoPagamentosPost (string id, string clientId, string accessToken, SolicitacaoPagamentoRequest solicitacaoPagamento);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Esta funcionalidade tem como objetivo realizar uma solicitação de pagamento de parcelas em aberto de determinado contrato. Como resultado da solicitação, são retornadas as informações das parcelas que foram pagas.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador do contrato.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="solicitacaoPagamento">Informações sobre o pagamento a ser realizado em um contrato.</param>
        /// <returns>ApiResponse of SolicitacaoPagamentoResponse</returns>
        ApiResponse<SolicitacaoPagamentoResponse> ContratosIdSolicitacaoPagamentosPostWithHttpInfo (string id, string clientId, string accessToken, SolicitacaoPagamentoRequest solicitacaoPagamento);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Esta funcionalidade tem como objetivo recuperar as informações de parcelas pagas sobre um contrato vinculado a um determinado cliente, dentro de um período.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <param name="cpf">Cpf do cliente que possui o contrato.</param>
        /// <param name="dataInicio">Data de início da busca. Limitada a 90 dias anteriores à data de movimento atual. (Formato yyyy-MM-dd)</param>
        /// <param name="dataFim">Data de fim da busca. Pode variar entre a data de movimento atual e os 90 dias que a antecedem. (Formato yyyy-MM-dd)</param>
        /// <returns>GetParcelasResponse</returns>
        GetParcelasResponse ContratosParcelasGet (string clientId, string accessToken, string codigoLojista, string cpf, string dataInicio, string dataFim);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Esta funcionalidade tem como objetivo recuperar as informações de parcelas pagas sobre um contrato vinculado a um determinado cliente, dentro de um período.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <param name="cpf">Cpf do cliente que possui o contrato.</param>
        /// <param name="dataInicio">Data de início da busca. Limitada a 90 dias anteriores à data de movimento atual. (Formato yyyy-MM-dd)</param>
        /// <param name="dataFim">Data de fim da busca. Pode variar entre a data de movimento atual e os 90 dias que a antecedem. (Formato yyyy-MM-dd)</param>
        /// <returns>ApiResponse of GetParcelasResponse</returns>
        ApiResponse<GetParcelasResponse> ContratosParcelasGetWithHttpInfo (string clientId, string accessToken, string codigoLojista, string cpf, string dataInicio, string dataFim);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Esta funcionalidade tem como objetivo recuperar as informações de status de um contrato vinculado a um determinado cliente.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="cpf">Cpf do cliente que possui o contrato.</param>
        /// <returns>GetStatusContratoResponse</returns>
        GetStatusContratoResponse ContratosStatusGet (string clientId, string accessToken, string cpf);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Esta funcionalidade tem como objetivo recuperar as informações de status de um contrato vinculado a um determinado cliente.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="cpf">Cpf do cliente que possui o contrato.</param>
        /// <returns>ApiResponse of GetStatusContratoResponse</returns>
        ApiResponse<GetStatusContratoResponse> ContratosStatusGetWithHttpInfo (string clientId, string accessToken, string cpf);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Esta funcionalidade tem como objetivo recuperar as informações de um contrato vinculado a um determinado cliente. Como resultado, será possível averiguar o saldo total deste contrato, além da lista de parcelas que o compõe, de forma detalhada, com informações especificas por parcela. Nesta modalidade de chamada, a pesquisa será realizada a partir do CPF do cliente.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <param name="cpf">Cpf do cliente que possui o contrato.</param>
        /// <returns>Task of GetContratosResponse</returns>
        System.Threading.Tasks.Task<GetContratosResponse> ContratosGetAsync (string clientId, string accessToken, string codigoLojista, string cpf);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Esta funcionalidade tem como objetivo recuperar as informações de um contrato vinculado a um determinado cliente. Como resultado, será possível averiguar o saldo total deste contrato, além da lista de parcelas que o compõe, de forma detalhada, com informações especificas por parcela. Nesta modalidade de chamada, a pesquisa será realizada a partir do CPF do cliente.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <param name="cpf">Cpf do cliente que possui o contrato.</param>
        /// <returns>Task of ApiResponse (GetContratosResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetContratosResponse>> ContratosGetAsyncWithHttpInfo (string clientId, string accessToken, string codigoLojista, string cpf);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Esta funcionalidade tem como objetivo cancelar um contrato no periódo D0 a D7 de um determinado cliente.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="id">O número do contrado a ser cancelado.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <param name="cpf">Cpf do cliente que possui o contrato.</param>
        /// <param name="operador">Código do operador.</param>
        /// <returns>Task of ExclusaoPagamentoResponse</returns>
        System.Threading.Tasks.Task<ExclusaoPagamentoResponse> ContratosIdCancelamentoPutAsync (string clientId, string accessToken, string id, byte[] xAuthorization, string codigoLojista, string cpf, string operador);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Esta funcionalidade tem como objetivo cancelar um contrato no periódo D0 a D7 de um determinado cliente.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="id">O número do contrado a ser cancelado.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <param name="cpf">Cpf do cliente que possui o contrato.</param>
        /// <param name="operador">Código do operador.</param>
        /// <returns>Task of ApiResponse (ExclusaoPagamentoResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExclusaoPagamentoResponse>> ContratosIdCancelamentoPutAsyncWithHttpInfo (string clientId, string accessToken, string id, byte[] xAuthorization, string codigoLojista, string cpf, string operador);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Permitir a exclusão, apenas em D0, do pagamento mais recente de um contrato. É importante observar que um pagamento pode englobar uma ou várias parcelas.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="id">O número do contrado a ser cancelado.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <param name="cpf">Cpf do cliente que possui o contrato.</param>
        /// <param name="operador">Código do operador.</param>
        /// <returns>Task of ExclusaoPagamentoResponse</returns>
        System.Threading.Tasks.Task<ExclusaoPagamentoResponse> ContratosIdExclusaoPagamentoDeleteAsync (string clientId, string accessToken, string id, byte[] xAuthorization, string codigoLojista, string cpf, string operador);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Permitir a exclusão, apenas em D0, do pagamento mais recente de um contrato. É importante observar que um pagamento pode englobar uma ou várias parcelas.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="id">O número do contrado a ser cancelado.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <param name="cpf">Cpf do cliente que possui o contrato.</param>
        /// <param name="operador">Código do operador.</param>
        /// <returns>Task of ApiResponse (ExclusaoPagamentoResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExclusaoPagamentoResponse>> ContratosIdExclusaoPagamentoDeleteAsyncWithHttpInfo (string clientId, string accessToken, string id, byte[] xAuthorization, string codigoLojista, string cpf, string operador);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Esta funcionalidade tem como objetivo recuperar as informações de um contrato vinculado a um determinado cliente. Como resultado, será possível averiguar o saldo total deste contrato, além da lista de parcelas que o compõe, de forma detalhada, com informações especificas por parcela. Nesta modalidade de chamada, a pesquisa será realizada a partir do código do contrato.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador do contrato.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <returns>Task of GetContratosResponse</returns>
        System.Threading.Tasks.Task<GetContratosResponse> ContratosIdGetAsync (string id, string clientId, string accessToken, string codigoLojista);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Esta funcionalidade tem como objetivo recuperar as informações de um contrato vinculado a um determinado cliente. Como resultado, será possível averiguar o saldo total deste contrato, além da lista de parcelas que o compõe, de forma detalhada, com informações especificas por parcela. Nesta modalidade de chamada, a pesquisa será realizada a partir do código do contrato.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador do contrato.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <returns>Task of ApiResponse (GetContratosResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetContratosResponse>> ContratosIdGetAsyncWithHttpInfo (string id, string clientId, string accessToken, string codigoLojista);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Esta funcionalidade tem como objetivo realizar uma solicitação de pagamento de parcelas em aberto de determinado contrato. Como resultado da solicitação, são retornadas as informações das parcelas que foram pagas.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador do contrato.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="solicitacaoPagamento">Informações sobre o pagamento a ser realizado em um contrato.</param>
        /// <returns>Task of SolicitacaoPagamentoResponse</returns>
        System.Threading.Tasks.Task<SolicitacaoPagamentoResponse> ContratosIdSolicitacaoPagamentosPostAsync (string id, string clientId, string accessToken, SolicitacaoPagamentoRequest solicitacaoPagamento);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Esta funcionalidade tem como objetivo realizar uma solicitação de pagamento de parcelas em aberto de determinado contrato. Como resultado da solicitação, são retornadas as informações das parcelas que foram pagas.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador do contrato.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="solicitacaoPagamento">Informações sobre o pagamento a ser realizado em um contrato.</param>
        /// <returns>Task of ApiResponse (SolicitacaoPagamentoResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SolicitacaoPagamentoResponse>> ContratosIdSolicitacaoPagamentosPostAsyncWithHttpInfo (string id, string clientId, string accessToken, SolicitacaoPagamentoRequest solicitacaoPagamento);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Esta funcionalidade tem como objetivo recuperar as informações de parcelas pagas sobre um contrato vinculado a um determinado cliente, dentro de um período.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <param name="cpf">Cpf do cliente que possui o contrato.</param>
        /// <param name="dataInicio">Data de início da busca. Limitada a 90 dias anteriores à data de movimento atual. (Formato yyyy-MM-dd)</param>
        /// <param name="dataFim">Data de fim da busca. Pode variar entre a data de movimento atual e os 90 dias que a antecedem. (Formato yyyy-MM-dd)</param>
        /// <returns>Task of GetParcelasResponse</returns>
        System.Threading.Tasks.Task<GetParcelasResponse> ContratosParcelasGetAsync (string clientId, string accessToken, string codigoLojista, string cpf, string dataInicio, string dataFim);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Esta funcionalidade tem como objetivo recuperar as informações de parcelas pagas sobre um contrato vinculado a um determinado cliente, dentro de um período.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <param name="cpf">Cpf do cliente que possui o contrato.</param>
        /// <param name="dataInicio">Data de início da busca. Limitada a 90 dias anteriores à data de movimento atual. (Formato yyyy-MM-dd)</param>
        /// <param name="dataFim">Data de fim da busca. Pode variar entre a data de movimento atual e os 90 dias que a antecedem. (Formato yyyy-MM-dd)</param>
        /// <returns>Task of ApiResponse (GetParcelasResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetParcelasResponse>> ContratosParcelasGetAsyncWithHttpInfo (string clientId, string accessToken, string codigoLojista, string cpf, string dataInicio, string dataFim);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Esta funcionalidade tem como objetivo recuperar as informações de status de um contrato vinculado a um determinado cliente.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="cpf">Cpf do cliente que possui o contrato.</param>
        /// <returns>Task of GetStatusContratoResponse</returns>
        System.Threading.Tasks.Task<GetStatusContratoResponse> ContratosStatusGetAsync (string clientId, string accessToken, string cpf);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Esta funcionalidade tem como objetivo recuperar as informações de status de um contrato vinculado a um determinado cliente.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="cpf">Cpf do cliente que possui o contrato.</param>
        /// <returns>Task of ApiResponse (GetStatusContratoResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetStatusContratoResponse>> ContratosStatusGetAsyncWithHttpInfo (string clientId, string accessToken, string cpf);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ContratoApi : IContratoApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ContratoApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ContratoApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContratoApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ContratoApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Esta funcionalidade tem como objetivo recuperar as informações de um contrato vinculado a um determinado cliente. Como resultado, será possível averiguar o saldo total deste contrato, além da lista de parcelas que o compõe, de forma detalhada, com informações especificas por parcela. Nesta modalidade de chamada, a pesquisa será realizada a partir do CPF do cliente.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <param name="cpf">Cpf do cliente que possui o contrato.</param>
        /// <returns>GetContratosResponse</returns>
        public GetContratosResponse ContratosGet (string clientId, string accessToken, string codigoLojista, string cpf)
        {
             ApiResponse<GetContratosResponse> localVarResponse = ContratosGetWithHttpInfo(clientId, accessToken, codigoLojista, cpf);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Esta funcionalidade tem como objetivo recuperar as informações de um contrato vinculado a um determinado cliente. Como resultado, será possível averiguar o saldo total deste contrato, além da lista de parcelas que o compõe, de forma detalhada, com informações especificas por parcela. Nesta modalidade de chamada, a pesquisa será realizada a partir do CPF do cliente.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <param name="cpf">Cpf do cliente que possui o contrato.</param>
        /// <returns>ApiResponse of GetContratosResponse</returns>
        public ApiResponse< GetContratosResponse > ContratosGetWithHttpInfo (string clientId, string accessToken, string codigoLojista, string cpf)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ContratoApi->ContratosGet");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling ContratoApi->ContratosGet");
            // verify the required parameter 'codigoLojista' is set
            if (codigoLojista == null)
                throw new ApiException(400, "Missing required parameter 'codigoLojista' when calling ContratoApi->ContratosGet");
            // verify the required parameter 'cpf' is set
            if (cpf == null)
                throw new ApiException(400, "Missing required parameter 'cpf' when calling ContratoApi->ContratosGet");

            var localVarPath = "/contratos";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cpf != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "cpf", cpf)); // query parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (codigoLojista != null) localVarHeaderParams.Add("codigoLojista", Configuration.ApiClient.ParameterToString(codigoLojista)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContratosGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetContratosResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetContratosResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetContratosResponse)));
        }

        /// <summary>
        ///  Esta funcionalidade tem como objetivo recuperar as informações de um contrato vinculado a um determinado cliente. Como resultado, será possível averiguar o saldo total deste contrato, além da lista de parcelas que o compõe, de forma detalhada, com informações especificas por parcela. Nesta modalidade de chamada, a pesquisa será realizada a partir do CPF do cliente.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <param name="cpf">Cpf do cliente que possui o contrato.</param>
        /// <returns>Task of GetContratosResponse</returns>
        public async System.Threading.Tasks.Task<GetContratosResponse> ContratosGetAsync (string clientId, string accessToken, string codigoLojista, string cpf)
        {
             ApiResponse<GetContratosResponse> localVarResponse = await ContratosGetAsyncWithHttpInfo(clientId, accessToken, codigoLojista, cpf);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Esta funcionalidade tem como objetivo recuperar as informações de um contrato vinculado a um determinado cliente. Como resultado, será possível averiguar o saldo total deste contrato, além da lista de parcelas que o compõe, de forma detalhada, com informações especificas por parcela. Nesta modalidade de chamada, a pesquisa será realizada a partir do CPF do cliente.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <param name="cpf">Cpf do cliente que possui o contrato.</param>
        /// <returns>Task of ApiResponse (GetContratosResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetContratosResponse>> ContratosGetAsyncWithHttpInfo (string clientId, string accessToken, string codigoLojista, string cpf)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ContratoApi->ContratosGet");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling ContratoApi->ContratosGet");
            // verify the required parameter 'codigoLojista' is set
            if (codigoLojista == null)
                throw new ApiException(400, "Missing required parameter 'codigoLojista' when calling ContratoApi->ContratosGet");
            // verify the required parameter 'cpf' is set
            if (cpf == null)
                throw new ApiException(400, "Missing required parameter 'cpf' when calling ContratoApi->ContratosGet");

            var localVarPath = "/contratos";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cpf != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "cpf", cpf)); // query parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (codigoLojista != null) localVarHeaderParams.Add("codigoLojista", Configuration.ApiClient.ParameterToString(codigoLojista)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContratosGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetContratosResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetContratosResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetContratosResponse)));
        }

        /// <summary>
        ///  Esta funcionalidade tem como objetivo cancelar um contrato no periódo D0 a D7 de um determinado cliente.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="id">O número do contrado a ser cancelado.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <param name="cpf">Cpf do cliente que possui o contrato.</param>
        /// <param name="operador">Código do operador.</param>
        /// <returns>ExclusaoPagamentoResponse</returns>
        public ExclusaoPagamentoResponse ContratosIdCancelamentoPut (string clientId, string accessToken, string id, byte[] xAuthorization, string codigoLojista, string cpf, string operador)
        {
             ApiResponse<ExclusaoPagamentoResponse> localVarResponse = ContratosIdCancelamentoPutWithHttpInfo(clientId, accessToken, id, xAuthorization, codigoLojista, cpf, operador);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Esta funcionalidade tem como objetivo cancelar um contrato no periódo D0 a D7 de um determinado cliente.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="id">O número do contrado a ser cancelado.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <param name="cpf">Cpf do cliente que possui o contrato.</param>
        /// <param name="operador">Código do operador.</param>
        /// <returns>ApiResponse of ExclusaoPagamentoResponse</returns>
        public ApiResponse< ExclusaoPagamentoResponse > ContratosIdCancelamentoPutWithHttpInfo (string clientId, string accessToken, string id, byte[] xAuthorization, string codigoLojista, string cpf, string operador)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ContratoApi->ContratosIdCancelamentoPut");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling ContratoApi->ContratosIdCancelamentoPut");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ContratoApi->ContratosIdCancelamentoPut");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ContratoApi->ContratosIdCancelamentoPut");
            // verify the required parameter 'codigoLojista' is set
            if (codigoLojista == null)
                throw new ApiException(400, "Missing required parameter 'codigoLojista' when calling ContratoApi->ContratosIdCancelamentoPut");
            // verify the required parameter 'cpf' is set
            if (cpf == null)
                throw new ApiException(400, "Missing required parameter 'cpf' when calling ContratoApi->ContratosIdCancelamentoPut");
            // verify the required parameter 'operador' is set
            if (operador == null)
                throw new ApiException(400, "Missing required parameter 'operador' when calling ContratoApi->ContratosIdCancelamentoPut");

            var localVarPath = "/contratos/{id}/cancelamento";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (xAuthorization != null) localVarHeaderParams.Add("x-authorization", Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (codigoLojista != null) localVarHeaderParams.Add("codigoLojista", Configuration.ApiClient.ParameterToString(codigoLojista)); // header parameter
            if (cpf != null) localVarHeaderParams.Add("cpf", Configuration.ApiClient.ParameterToString(cpf)); // header parameter
            if (operador != null) localVarHeaderParams.Add("operador", Configuration.ApiClient.ParameterToString(operador)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContratosIdCancelamentoPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExclusaoPagamentoResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExclusaoPagamentoResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExclusaoPagamentoResponse)));
        }

        /// <summary>
        ///  Esta funcionalidade tem como objetivo cancelar um contrato no periódo D0 a D7 de um determinado cliente.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="id">O número do contrado a ser cancelado.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <param name="cpf">Cpf do cliente que possui o contrato.</param>
        /// <param name="operador">Código do operador.</param>
        /// <returns>Task of ExclusaoPagamentoResponse</returns>
        public async System.Threading.Tasks.Task<ExclusaoPagamentoResponse> ContratosIdCancelamentoPutAsync (string clientId, string accessToken, string id, byte[] xAuthorization, string codigoLojista, string cpf, string operador)
        {
             ApiResponse<ExclusaoPagamentoResponse> localVarResponse = await ContratosIdCancelamentoPutAsyncWithHttpInfo(clientId, accessToken, id, xAuthorization, codigoLojista, cpf, operador);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Esta funcionalidade tem como objetivo cancelar um contrato no periódo D0 a D7 de um determinado cliente.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="id">O número do contrado a ser cancelado.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <param name="cpf">Cpf do cliente que possui o contrato.</param>
        /// <param name="operador">Código do operador.</param>
        /// <returns>Task of ApiResponse (ExclusaoPagamentoResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExclusaoPagamentoResponse>> ContratosIdCancelamentoPutAsyncWithHttpInfo (string clientId, string accessToken, string id, byte[] xAuthorization, string codigoLojista, string cpf, string operador)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ContratoApi->ContratosIdCancelamentoPut");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling ContratoApi->ContratosIdCancelamentoPut");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ContratoApi->ContratosIdCancelamentoPut");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ContratoApi->ContratosIdCancelamentoPut");
            // verify the required parameter 'codigoLojista' is set
            if (codigoLojista == null)
                throw new ApiException(400, "Missing required parameter 'codigoLojista' when calling ContratoApi->ContratosIdCancelamentoPut");
            // verify the required parameter 'cpf' is set
            if (cpf == null)
                throw new ApiException(400, "Missing required parameter 'cpf' when calling ContratoApi->ContratosIdCancelamentoPut");
            // verify the required parameter 'operador' is set
            if (operador == null)
                throw new ApiException(400, "Missing required parameter 'operador' when calling ContratoApi->ContratosIdCancelamentoPut");

            var localVarPath = "/contratos/{id}/cancelamento";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (xAuthorization != null) localVarHeaderParams.Add("x-authorization", Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (codigoLojista != null) localVarHeaderParams.Add("codigoLojista", Configuration.ApiClient.ParameterToString(codigoLojista)); // header parameter
            if (cpf != null) localVarHeaderParams.Add("cpf", Configuration.ApiClient.ParameterToString(cpf)); // header parameter
            if (operador != null) localVarHeaderParams.Add("operador", Configuration.ApiClient.ParameterToString(operador)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContratosIdCancelamentoPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExclusaoPagamentoResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExclusaoPagamentoResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExclusaoPagamentoResponse)));
        }

        /// <summary>
        ///  Permitir a exclusão, apenas em D0, do pagamento mais recente de um contrato. É importante observar que um pagamento pode englobar uma ou várias parcelas.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="id">O número do contrado a ser cancelado.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <param name="cpf">Cpf do cliente que possui o contrato.</param>
        /// <param name="operador">Código do operador.</param>
        /// <returns>ExclusaoPagamentoResponse</returns>
        public ExclusaoPagamentoResponse ContratosIdExclusaoPagamentoDelete (string clientId, string accessToken, string id, byte[] xAuthorization, string codigoLojista, string cpf, string operador)
        {
             ApiResponse<ExclusaoPagamentoResponse> localVarResponse = ContratosIdExclusaoPagamentoDeleteWithHttpInfo(clientId, accessToken, id, xAuthorization, codigoLojista, cpf, operador);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Permitir a exclusão, apenas em D0, do pagamento mais recente de um contrato. É importante observar que um pagamento pode englobar uma ou várias parcelas.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="id">O número do contrado a ser cancelado.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <param name="cpf">Cpf do cliente que possui o contrato.</param>
        /// <param name="operador">Código do operador.</param>
        /// <returns>ApiResponse of ExclusaoPagamentoResponse</returns>
        public ApiResponse< ExclusaoPagamentoResponse > ContratosIdExclusaoPagamentoDeleteWithHttpInfo (string clientId, string accessToken, string id, byte[] xAuthorization, string codigoLojista, string cpf, string operador)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ContratoApi->ContratosIdExclusaoPagamentoDelete");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling ContratoApi->ContratosIdExclusaoPagamentoDelete");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ContratoApi->ContratosIdExclusaoPagamentoDelete");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ContratoApi->ContratosIdExclusaoPagamentoDelete");
            // verify the required parameter 'codigoLojista' is set
            if (codigoLojista == null)
                throw new ApiException(400, "Missing required parameter 'codigoLojista' when calling ContratoApi->ContratosIdExclusaoPagamentoDelete");
            // verify the required parameter 'cpf' is set
            if (cpf == null)
                throw new ApiException(400, "Missing required parameter 'cpf' when calling ContratoApi->ContratosIdExclusaoPagamentoDelete");
            // verify the required parameter 'operador' is set
            if (operador == null)
                throw new ApiException(400, "Missing required parameter 'operador' when calling ContratoApi->ContratosIdExclusaoPagamentoDelete");

            var localVarPath = "/contratos/{id}/exclusao-pagamento";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (xAuthorization != null) localVarHeaderParams.Add("x-authorization", Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (codigoLojista != null) localVarHeaderParams.Add("codigoLojista", Configuration.ApiClient.ParameterToString(codigoLojista)); // header parameter
            if (cpf != null) localVarHeaderParams.Add("cpf", Configuration.ApiClient.ParameterToString(cpf)); // header parameter
            if (operador != null) localVarHeaderParams.Add("operador", Configuration.ApiClient.ParameterToString(operador)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContratosIdExclusaoPagamentoDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExclusaoPagamentoResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExclusaoPagamentoResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExclusaoPagamentoResponse)));
        }

        /// <summary>
        ///  Permitir a exclusão, apenas em D0, do pagamento mais recente de um contrato. É importante observar que um pagamento pode englobar uma ou várias parcelas.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="id">O número do contrado a ser cancelado.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <param name="cpf">Cpf do cliente que possui o contrato.</param>
        /// <param name="operador">Código do operador.</param>
        /// <returns>Task of ExclusaoPagamentoResponse</returns>
        public async System.Threading.Tasks.Task<ExclusaoPagamentoResponse> ContratosIdExclusaoPagamentoDeleteAsync (string clientId, string accessToken, string id, byte[] xAuthorization, string codigoLojista, string cpf, string operador)
        {
             ApiResponse<ExclusaoPagamentoResponse> localVarResponse = await ContratosIdExclusaoPagamentoDeleteAsyncWithHttpInfo(clientId, accessToken, id, xAuthorization, codigoLojista, cpf, operador);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Permitir a exclusão, apenas em D0, do pagamento mais recente de um contrato. É importante observar que um pagamento pode englobar uma ou várias parcelas.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="id">O número do contrado a ser cancelado.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <param name="cpf">Cpf do cliente que possui o contrato.</param>
        /// <param name="operador">Código do operador.</param>
        /// <returns>Task of ApiResponse (ExclusaoPagamentoResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExclusaoPagamentoResponse>> ContratosIdExclusaoPagamentoDeleteAsyncWithHttpInfo (string clientId, string accessToken, string id, byte[] xAuthorization, string codigoLojista, string cpf, string operador)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ContratoApi->ContratosIdExclusaoPagamentoDelete");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling ContratoApi->ContratosIdExclusaoPagamentoDelete");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ContratoApi->ContratosIdExclusaoPagamentoDelete");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling ContratoApi->ContratosIdExclusaoPagamentoDelete");
            // verify the required parameter 'codigoLojista' is set
            if (codigoLojista == null)
                throw new ApiException(400, "Missing required parameter 'codigoLojista' when calling ContratoApi->ContratosIdExclusaoPagamentoDelete");
            // verify the required parameter 'cpf' is set
            if (cpf == null)
                throw new ApiException(400, "Missing required parameter 'cpf' when calling ContratoApi->ContratosIdExclusaoPagamentoDelete");
            // verify the required parameter 'operador' is set
            if (operador == null)
                throw new ApiException(400, "Missing required parameter 'operador' when calling ContratoApi->ContratosIdExclusaoPagamentoDelete");

            var localVarPath = "/contratos/{id}/exclusao-pagamento";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (xAuthorization != null) localVarHeaderParams.Add("x-authorization", Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (codigoLojista != null) localVarHeaderParams.Add("codigoLojista", Configuration.ApiClient.ParameterToString(codigoLojista)); // header parameter
            if (cpf != null) localVarHeaderParams.Add("cpf", Configuration.ApiClient.ParameterToString(cpf)); // header parameter
            if (operador != null) localVarHeaderParams.Add("operador", Configuration.ApiClient.ParameterToString(operador)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContratosIdExclusaoPagamentoDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExclusaoPagamentoResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExclusaoPagamentoResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExclusaoPagamentoResponse)));
        }

        /// <summary>
        ///  Esta funcionalidade tem como objetivo recuperar as informações de um contrato vinculado a um determinado cliente. Como resultado, será possível averiguar o saldo total deste contrato, além da lista de parcelas que o compõe, de forma detalhada, com informações especificas por parcela. Nesta modalidade de chamada, a pesquisa será realizada a partir do código do contrato.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador do contrato.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <returns>GetContratosResponse</returns>
        public GetContratosResponse ContratosIdGet (string id, string clientId, string accessToken, string codigoLojista)
        {
             ApiResponse<GetContratosResponse> localVarResponse = ContratosIdGetWithHttpInfo(id, clientId, accessToken, codigoLojista);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Esta funcionalidade tem como objetivo recuperar as informações de um contrato vinculado a um determinado cliente. Como resultado, será possível averiguar o saldo total deste contrato, além da lista de parcelas que o compõe, de forma detalhada, com informações especificas por parcela. Nesta modalidade de chamada, a pesquisa será realizada a partir do código do contrato.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador do contrato.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <returns>ApiResponse of GetContratosResponse</returns>
        public ApiResponse< GetContratosResponse > ContratosIdGetWithHttpInfo (string id, string clientId, string accessToken, string codigoLojista)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ContratoApi->ContratosIdGet");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ContratoApi->ContratosIdGet");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling ContratoApi->ContratosIdGet");
            // verify the required parameter 'codigoLojista' is set
            if (codigoLojista == null)
                throw new ApiException(400, "Missing required parameter 'codigoLojista' when calling ContratoApi->ContratosIdGet");

            var localVarPath = "/contratos/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (codigoLojista != null) localVarHeaderParams.Add("codigoLojista", Configuration.ApiClient.ParameterToString(codigoLojista)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContratosIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetContratosResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetContratosResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetContratosResponse)));
        }

        /// <summary>
        ///  Esta funcionalidade tem como objetivo recuperar as informações de um contrato vinculado a um determinado cliente. Como resultado, será possível averiguar o saldo total deste contrato, além da lista de parcelas que o compõe, de forma detalhada, com informações especificas por parcela. Nesta modalidade de chamada, a pesquisa será realizada a partir do código do contrato.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador do contrato.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <returns>Task of GetContratosResponse</returns>
        public async System.Threading.Tasks.Task<GetContratosResponse> ContratosIdGetAsync (string id, string clientId, string accessToken, string codigoLojista)
        {
             ApiResponse<GetContratosResponse> localVarResponse = await ContratosIdGetAsyncWithHttpInfo(id, clientId, accessToken, codigoLojista);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Esta funcionalidade tem como objetivo recuperar as informações de um contrato vinculado a um determinado cliente. Como resultado, será possível averiguar o saldo total deste contrato, além da lista de parcelas que o compõe, de forma detalhada, com informações especificas por parcela. Nesta modalidade de chamada, a pesquisa será realizada a partir do código do contrato.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador do contrato.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <returns>Task of ApiResponse (GetContratosResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetContratosResponse>> ContratosIdGetAsyncWithHttpInfo (string id, string clientId, string accessToken, string codigoLojista)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ContratoApi->ContratosIdGet");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ContratoApi->ContratosIdGet");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling ContratoApi->ContratosIdGet");
            // verify the required parameter 'codigoLojista' is set
            if (codigoLojista == null)
                throw new ApiException(400, "Missing required parameter 'codigoLojista' when calling ContratoApi->ContratosIdGet");

            var localVarPath = "/contratos/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (codigoLojista != null) localVarHeaderParams.Add("codigoLojista", Configuration.ApiClient.ParameterToString(codigoLojista)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContratosIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetContratosResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetContratosResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetContratosResponse)));
        }

        /// <summary>
        ///  Esta funcionalidade tem como objetivo realizar uma solicitação de pagamento de parcelas em aberto de determinado contrato. Como resultado da solicitação, são retornadas as informações das parcelas que foram pagas.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador do contrato.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="solicitacaoPagamento">Informações sobre o pagamento a ser realizado em um contrato.</param>
        /// <returns>SolicitacaoPagamentoResponse</returns>
        public SolicitacaoPagamentoResponse ContratosIdSolicitacaoPagamentosPost (string id, string clientId, string accessToken, SolicitacaoPagamentoRequest solicitacaoPagamento)
        {
             ApiResponse<SolicitacaoPagamentoResponse> localVarResponse = ContratosIdSolicitacaoPagamentosPostWithHttpInfo(id, clientId, accessToken, solicitacaoPagamento);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Esta funcionalidade tem como objetivo realizar uma solicitação de pagamento de parcelas em aberto de determinado contrato. Como resultado da solicitação, são retornadas as informações das parcelas que foram pagas.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador do contrato.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="solicitacaoPagamento">Informações sobre o pagamento a ser realizado em um contrato.</param>
        /// <returns>ApiResponse of SolicitacaoPagamentoResponse</returns>
        public ApiResponse< SolicitacaoPagamentoResponse > ContratosIdSolicitacaoPagamentosPostWithHttpInfo (string id, string clientId, string accessToken, SolicitacaoPagamentoRequest solicitacaoPagamento)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ContratoApi->ContratosIdSolicitacaoPagamentosPost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ContratoApi->ContratosIdSolicitacaoPagamentosPost");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling ContratoApi->ContratosIdSolicitacaoPagamentosPost");
            // verify the required parameter 'solicitacaoPagamento' is set
            if (solicitacaoPagamento == null)
                throw new ApiException(400, "Missing required parameter 'solicitacaoPagamento' when calling ContratoApi->ContratosIdSolicitacaoPagamentosPost");

            var localVarPath = "/contratos/{id}/solicitacao-pagamentos";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (solicitacaoPagamento != null && solicitacaoPagamento.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(solicitacaoPagamento); // http body (model) parameter
            }
            else
            {
                localVarPostBody = solicitacaoPagamento; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContratosIdSolicitacaoPagamentosPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SolicitacaoPagamentoResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SolicitacaoPagamentoResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SolicitacaoPagamentoResponse)));
        }

        /// <summary>
        ///  Esta funcionalidade tem como objetivo realizar uma solicitação de pagamento de parcelas em aberto de determinado contrato. Como resultado da solicitação, são retornadas as informações das parcelas que foram pagas.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador do contrato.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="solicitacaoPagamento">Informações sobre o pagamento a ser realizado em um contrato.</param>
        /// <returns>Task of SolicitacaoPagamentoResponse</returns>
        public async System.Threading.Tasks.Task<SolicitacaoPagamentoResponse> ContratosIdSolicitacaoPagamentosPostAsync (string id, string clientId, string accessToken, SolicitacaoPagamentoRequest solicitacaoPagamento)
        {
             ApiResponse<SolicitacaoPagamentoResponse> localVarResponse = await ContratosIdSolicitacaoPagamentosPostAsyncWithHttpInfo(id, clientId, accessToken, solicitacaoPagamento);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Esta funcionalidade tem como objetivo realizar uma solicitação de pagamento de parcelas em aberto de determinado contrato. Como resultado da solicitação, são retornadas as informações das parcelas que foram pagas.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador do contrato.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="solicitacaoPagamento">Informações sobre o pagamento a ser realizado em um contrato.</param>
        /// <returns>Task of ApiResponse (SolicitacaoPagamentoResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SolicitacaoPagamentoResponse>> ContratosIdSolicitacaoPagamentosPostAsyncWithHttpInfo (string id, string clientId, string accessToken, SolicitacaoPagamentoRequest solicitacaoPagamento)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ContratoApi->ContratosIdSolicitacaoPagamentosPost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ContratoApi->ContratosIdSolicitacaoPagamentosPost");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling ContratoApi->ContratosIdSolicitacaoPagamentosPost");
            // verify the required parameter 'solicitacaoPagamento' is set
            if (solicitacaoPagamento == null)
                throw new ApiException(400, "Missing required parameter 'solicitacaoPagamento' when calling ContratoApi->ContratosIdSolicitacaoPagamentosPost");

            var localVarPath = "/contratos/{id}/solicitacao-pagamentos";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (solicitacaoPagamento != null && solicitacaoPagamento.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(solicitacaoPagamento); // http body (model) parameter
            }
            else
            {
                localVarPostBody = solicitacaoPagamento; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContratosIdSolicitacaoPagamentosPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SolicitacaoPagamentoResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SolicitacaoPagamentoResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SolicitacaoPagamentoResponse)));
        }

        /// <summary>
        ///  Esta funcionalidade tem como objetivo recuperar as informações de parcelas pagas sobre um contrato vinculado a um determinado cliente, dentro de um período.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <param name="cpf">Cpf do cliente que possui o contrato.</param>
        /// <param name="dataInicio">Data de início da busca. Limitada a 90 dias anteriores à data de movimento atual. (Formato yyyy-MM-dd)</param>
        /// <param name="dataFim">Data de fim da busca. Pode variar entre a data de movimento atual e os 90 dias que a antecedem. (Formato yyyy-MM-dd)</param>
        /// <returns>GetParcelasResponse</returns>
        public GetParcelasResponse ContratosParcelasGet (string clientId, string accessToken, string codigoLojista, string cpf, string dataInicio, string dataFim)
        {
             ApiResponse<GetParcelasResponse> localVarResponse = ContratosParcelasGetWithHttpInfo(clientId, accessToken, codigoLojista, cpf, dataInicio, dataFim);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Esta funcionalidade tem como objetivo recuperar as informações de parcelas pagas sobre um contrato vinculado a um determinado cliente, dentro de um período.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <param name="cpf">Cpf do cliente que possui o contrato.</param>
        /// <param name="dataInicio">Data de início da busca. Limitada a 90 dias anteriores à data de movimento atual. (Formato yyyy-MM-dd)</param>
        /// <param name="dataFim">Data de fim da busca. Pode variar entre a data de movimento atual e os 90 dias que a antecedem. (Formato yyyy-MM-dd)</param>
        /// <returns>ApiResponse of GetParcelasResponse</returns>
        public ApiResponse< GetParcelasResponse > ContratosParcelasGetWithHttpInfo (string clientId, string accessToken, string codigoLojista, string cpf, string dataInicio, string dataFim)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ContratoApi->ContratosParcelasGet");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling ContratoApi->ContratosParcelasGet");
            // verify the required parameter 'codigoLojista' is set
            if (codigoLojista == null)
                throw new ApiException(400, "Missing required parameter 'codigoLojista' when calling ContratoApi->ContratosParcelasGet");
            // verify the required parameter 'cpf' is set
            if (cpf == null)
                throw new ApiException(400, "Missing required parameter 'cpf' when calling ContratoApi->ContratosParcelasGet");
            // verify the required parameter 'dataInicio' is set
            if (dataInicio == null)
                throw new ApiException(400, "Missing required parameter 'dataInicio' when calling ContratoApi->ContratosParcelasGet");
            // verify the required parameter 'dataFim' is set
            if (dataFim == null)
                throw new ApiException(400, "Missing required parameter 'dataFim' when calling ContratoApi->ContratosParcelasGet");

            var localVarPath = "/contratos/parcelas";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cpf != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "cpf", cpf)); // query parameter
            if (dataInicio != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "dataInicio", dataInicio)); // query parameter
            if (dataFim != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "dataFim", dataFim)); // query parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (codigoLojista != null) localVarHeaderParams.Add("codigoLojista", Configuration.ApiClient.ParameterToString(codigoLojista)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContratosParcelasGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetParcelasResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetParcelasResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetParcelasResponse)));
        }

        /// <summary>
        ///  Esta funcionalidade tem como objetivo recuperar as informações de parcelas pagas sobre um contrato vinculado a um determinado cliente, dentro de um período.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <param name="cpf">Cpf do cliente que possui o contrato.</param>
        /// <param name="dataInicio">Data de início da busca. Limitada a 90 dias anteriores à data de movimento atual. (Formato yyyy-MM-dd)</param>
        /// <param name="dataFim">Data de fim da busca. Pode variar entre a data de movimento atual e os 90 dias que a antecedem. (Formato yyyy-MM-dd)</param>
        /// <returns>Task of GetParcelasResponse</returns>
        public async System.Threading.Tasks.Task<GetParcelasResponse> ContratosParcelasGetAsync (string clientId, string accessToken, string codigoLojista, string cpf, string dataInicio, string dataFim)
        {
             ApiResponse<GetParcelasResponse> localVarResponse = await ContratosParcelasGetAsyncWithHttpInfo(clientId, accessToken, codigoLojista, cpf, dataInicio, dataFim);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Esta funcionalidade tem como objetivo recuperar as informações de parcelas pagas sobre um contrato vinculado a um determinado cliente, dentro de um período.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <param name="cpf">Cpf do cliente que possui o contrato.</param>
        /// <param name="dataInicio">Data de início da busca. Limitada a 90 dias anteriores à data de movimento atual. (Formato yyyy-MM-dd)</param>
        /// <param name="dataFim">Data de fim da busca. Pode variar entre a data de movimento atual e os 90 dias que a antecedem. (Formato yyyy-MM-dd)</param>
        /// <returns>Task of ApiResponse (GetParcelasResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetParcelasResponse>> ContratosParcelasGetAsyncWithHttpInfo (string clientId, string accessToken, string codigoLojista, string cpf, string dataInicio, string dataFim)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ContratoApi->ContratosParcelasGet");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling ContratoApi->ContratosParcelasGet");
            // verify the required parameter 'codigoLojista' is set
            if (codigoLojista == null)
                throw new ApiException(400, "Missing required parameter 'codigoLojista' when calling ContratoApi->ContratosParcelasGet");
            // verify the required parameter 'cpf' is set
            if (cpf == null)
                throw new ApiException(400, "Missing required parameter 'cpf' when calling ContratoApi->ContratosParcelasGet");
            // verify the required parameter 'dataInicio' is set
            if (dataInicio == null)
                throw new ApiException(400, "Missing required parameter 'dataInicio' when calling ContratoApi->ContratosParcelasGet");
            // verify the required parameter 'dataFim' is set
            if (dataFim == null)
                throw new ApiException(400, "Missing required parameter 'dataFim' when calling ContratoApi->ContratosParcelasGet");

            var localVarPath = "/contratos/parcelas";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cpf != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "cpf", cpf)); // query parameter
            if (dataInicio != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "dataInicio", dataInicio)); // query parameter
            if (dataFim != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "dataFim", dataFim)); // query parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (codigoLojista != null) localVarHeaderParams.Add("codigoLojista", Configuration.ApiClient.ParameterToString(codigoLojista)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContratosParcelasGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetParcelasResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetParcelasResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetParcelasResponse)));
        }

        /// <summary>
        ///  Esta funcionalidade tem como objetivo recuperar as informações de status de um contrato vinculado a um determinado cliente.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="cpf">Cpf do cliente que possui o contrato.</param>
        /// <returns>GetStatusContratoResponse</returns>
        public GetStatusContratoResponse ContratosStatusGet (string clientId, string accessToken, string cpf)
        {
             ApiResponse<GetStatusContratoResponse> localVarResponse = ContratosStatusGetWithHttpInfo(clientId, accessToken, cpf);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Esta funcionalidade tem como objetivo recuperar as informações de status de um contrato vinculado a um determinado cliente.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="cpf">Cpf do cliente que possui o contrato.</param>
        /// <returns>ApiResponse of GetStatusContratoResponse</returns>
        public ApiResponse< GetStatusContratoResponse > ContratosStatusGetWithHttpInfo (string clientId, string accessToken, string cpf)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ContratoApi->ContratosStatusGet");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling ContratoApi->ContratosStatusGet");
            // verify the required parameter 'cpf' is set
            if (cpf == null)
                throw new ApiException(400, "Missing required parameter 'cpf' when calling ContratoApi->ContratosStatusGet");

            var localVarPath = "/contratos/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cpf != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "cpf", cpf)); // query parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContratosStatusGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetStatusContratoResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetStatusContratoResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetStatusContratoResponse)));
        }

        /// <summary>
        ///  Esta funcionalidade tem como objetivo recuperar as informações de status de um contrato vinculado a um determinado cliente.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="cpf">Cpf do cliente que possui o contrato.</param>
        /// <returns>Task of GetStatusContratoResponse</returns>
        public async System.Threading.Tasks.Task<GetStatusContratoResponse> ContratosStatusGetAsync (string clientId, string accessToken, string cpf)
        {
             ApiResponse<GetStatusContratoResponse> localVarResponse = await ContratosStatusGetAsyncWithHttpInfo(clientId, accessToken, cpf);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Esta funcionalidade tem como objetivo recuperar as informações de status de um contrato vinculado a um determinado cliente.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="cpf">Cpf do cliente que possui o contrato.</param>
        /// <returns>Task of ApiResponse (GetStatusContratoResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetStatusContratoResponse>> ContratosStatusGetAsyncWithHttpInfo (string clientId, string accessToken, string cpf)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ContratoApi->ContratosStatusGet");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling ContratoApi->ContratosStatusGet");
            // verify the required parameter 'cpf' is set
            if (cpf == null)
                throw new ApiException(400, "Missing required parameter 'cpf' when calling ContratoApi->ContratosStatusGet");

            var localVarPath = "/contratos/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cpf != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "cpf", cpf)); // query parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContratosStatusGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetStatusContratoResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetStatusContratoResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetStatusContratoResponse)));
        }

    }
}
